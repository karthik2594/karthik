/*
 * This file is generated by jOOQ.
 */
package com.example.roles.model.tables;


import com.example.roles.model.Indexes;
import com.example.roles.model.Keys;
import com.example.roles.model.Public;
import com.example.roles.model.tables.records.RefDetailsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefDetails extends TableImpl<RefDetailsRecord> {

    private static final long serialVersionUID = 1227009740;

    /**
     * The reference instance of <code>public.ref_details</code>
     */
    public static final RefDetails REF_DETAILS = new RefDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefDetailsRecord> getRecordType() {
        return RefDetailsRecord.class;
    }

    /**
     * The column <code>public.ref_details.ref_id</code>.
     */
    public final TableField<RefDetailsRecord, Integer> REF_ID = createField(DSL.name("ref_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('ref_details_ref_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.ref_details.rol_id</code>.
     */
    public final TableField<RefDetailsRecord, Integer> ROL_ID = createField(DSL.name("rol_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ref_details.use_id</code>.
     */
    public final TableField<RefDetailsRecord, Integer> USE_ID = createField(DSL.name("use_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.ref_details</code> table reference
     */
    public RefDetails() {
        this(DSL.name("ref_details"), null);
    }

    /**
     * Create an aliased <code>public.ref_details</code> table reference
     */
    public RefDetails(String alias) {
        this(DSL.name(alias), REF_DETAILS);
    }

    /**
     * Create an aliased <code>public.ref_details</code> table reference
     */
    public RefDetails(Name alias) {
        this(alias, REF_DETAILS);
    }

    private RefDetails(Name alias, Table<RefDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefDetails(Name alias, Table<RefDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RefDetails(Table<O> child, ForeignKey<O, RefDetailsRecord> key) {
        super(child, key, REF_DETAILS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REF_DETAILS_PKEY);
    }

    @Override
    public Identity<RefDetailsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REF_DETAILS;
    }

    @Override
    public UniqueKey<RefDetailsRecord> getPrimaryKey() {
        return Keys.REF_DETAILS_PKEY;
    }

    @Override
    public List<UniqueKey<RefDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<RefDetailsRecord>>asList(Keys.REF_DETAILS_PKEY);
    }

    @Override
    public List<ForeignKey<RefDetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefDetailsRecord, ?>>asList(Keys.REF_DETAILS__REF_DETAILS_ROL_ID_FKEY, Keys.REF_DETAILS__REF_DETAILS_USE_ID_FKEY);
    }

    public Roles roles() {
        return new Roles(this, Keys.REF_DETAILS__REF_DETAILS_ROL_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.REF_DETAILS__REF_DETAILS_USE_ID_FKEY);
    }

    @Override
    public RefDetails as(String alias) {
        return new RefDetails(DSL.name(alias), this);
    }

    @Override
    public RefDetails as(Name alias) {
        return new RefDetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefDetails rename(String name) {
        return new RefDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefDetails rename(Name name) {
        return new RefDetails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
