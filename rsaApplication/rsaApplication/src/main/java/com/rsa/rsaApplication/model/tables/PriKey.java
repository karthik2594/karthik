/*
 * This file is generated by jOOQ.
 */
package com.rsa.rsaApplication.model.tables;


import com.rsa.rsaApplication.model.Indexes;
import com.rsa.rsaApplication.model.Keys;
import com.rsa.rsaApplication.model.Public;
import com.rsa.rsaApplication.model.tables.records.PriKeyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PriKey extends TableImpl<PriKeyRecord> {

    private static final long serialVersionUID = -705832891;

    /**
     * The reference instance of <code>public.pri_key</code>
     */
    public static final PriKey PRI_KEY = new PriKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PriKeyRecord> getRecordType() {
        return PriKeyRecord.class;
    }

    /**
     * The column <code>public.pri_key.id</code>.
     */
    public final TableField<PriKeyRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('pri_key_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.pri_key.pri_key</code>.
     */
    public final TableField<PriKeyRecord, String> PRI_KEY_ = createField(DSL.name("pri_key"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.pri_key.usr_id</code>.
     */
    public final TableField<PriKeyRecord, Integer> USR_ID = createField(DSL.name("usr_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.pri_key</code> table reference
     */
    public PriKey() {
        this(DSL.name("pri_key"), null);
    }

    /**
     * Create an aliased <code>public.pri_key</code> table reference
     */
    public PriKey(String alias) {
        this(DSL.name(alias), PRI_KEY);
    }

    /**
     * Create an aliased <code>public.pri_key</code> table reference
     */
    public PriKey(Name alias) {
        this(alias, PRI_KEY);
    }

    private PriKey(Name alias, Table<PriKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private PriKey(Name alias, Table<PriKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PriKey(Table<O> child, ForeignKey<O, PriKeyRecord> key) {
        super(child, key, PRI_KEY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRI_KEY_PKEY);
    }

    @Override
    public Identity<PriKeyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRI_KEY;
    }

    @Override
    public UniqueKey<PriKeyRecord> getPrimaryKey() {
        return Keys.PRI_KEY_PKEY;
    }

    @Override
    public List<UniqueKey<PriKeyRecord>> getKeys() {
        return Arrays.<UniqueKey<PriKeyRecord>>asList(Keys.PRI_KEY_PKEY);
    }

    @Override
    public List<ForeignKey<PriKeyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PriKeyRecord, ?>>asList(Keys.PRI_KEY__PRI_KEY_USR_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.PRI_KEY__PRI_KEY_USR_ID_FKEY);
    }

    @Override
    public PriKey as(String alias) {
        return new PriKey(DSL.name(alias), this);
    }

    @Override
    public PriKey as(Name alias) {
        return new PriKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PriKey rename(String name) {
        return new PriKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PriKey rename(Name name) {
        return new PriKey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
