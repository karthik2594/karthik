buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.12.3'
        classpath 'org.postgresql:postgresql:42.2.8'
    }
}
plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}
group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}
ext {
    set('springCloudVersion', "Hoxton.SR1")
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
test {
    useJUnitPlatform()
}
import org.jooq.codegen.GenerationTool
task codeGen {
    doLast {
        println 'Generating jOOQ code.'
        def writer = new StringWriter()
        def xml = new groovy.xml.MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.12.0.xsd') {
                    jdbc() {
                        driver('org.postgresql.Driver')
                        url('jdbc:postgresql://localhost:5432/movie_reviews')
                        user('postgres')
                        password('password')
                    }
                    generator() {
                        database() {
                            inputSchema('public')
                            excludes('flyway_schema_history')
                        }
                        generate([:]) {
                            pojos true
                            daos true
                        }
                        target() {
                            packageName('com.movie.movieApplication.Model')
                            directory('src/main/java')
                        }
                    }
                }
        GenerationTool.generate(writer.toString())
        println 'jOOQ code generated successfully.'
    }
}