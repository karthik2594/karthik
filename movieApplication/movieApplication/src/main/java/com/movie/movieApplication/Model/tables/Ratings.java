/*
 * This file is generated by jOOQ.
 */
package com.movie.movieApplication.Model.tables;


import com.movie.movieApplication.Model.Indexes;
import com.movie.movieApplication.Model.Keys;
import com.movie.movieApplication.Model.Public;
import com.movie.movieApplication.Model.tables.records.RatingsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ratings extends TableImpl<RatingsRecord> {

    private static final long serialVersionUID = 1388664615;

    /**
     * The reference instance of <code>public.ratings</code>
     */
    public static final Ratings RATINGS = new Ratings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RatingsRecord> getRecordType() {
        return RatingsRecord.class;
    }

    /**
     * The column <code>public.ratings.rating_id</code>.
     */
    public final TableField<RatingsRecord, Integer> RATING_ID = createField(DSL.name("rating_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('ratings_rating_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.ratings.rating</code>.
     */
    public final TableField<RatingsRecord, Integer> RATING = createField(DSL.name("rating"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.ratings</code> table reference
     */
    public Ratings() {
        this(DSL.name("ratings"), null);
    }

    /**
     * Create an aliased <code>public.ratings</code> table reference
     */
    public Ratings(String alias) {
        this(DSL.name(alias), RATINGS);
    }

    /**
     * Create an aliased <code>public.ratings</code> table reference
     */
    public Ratings(Name alias) {
        this(alias, RATINGS);
    }

    private Ratings(Name alias, Table<RatingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ratings(Name alias, Table<RatingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Ratings(Table<O> child, ForeignKey<O, RatingsRecord> key) {
        super(child, key, RATINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RATINGS_PKEY);
    }

    @Override
    public Identity<RatingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RATINGS;
    }

    @Override
    public UniqueKey<RatingsRecord> getPrimaryKey() {
        return Keys.RATINGS_PKEY;
    }

    @Override
    public List<UniqueKey<RatingsRecord>> getKeys() {
        return Arrays.<UniqueKey<RatingsRecord>>asList(Keys.RATINGS_PKEY);
    }

    @Override
    public Ratings as(String alias) {
        return new Ratings(DSL.name(alias), this);
    }

    @Override
    public Ratings as(Name alias) {
        return new Ratings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ratings rename(String name) {
        return new Ratings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ratings rename(Name name) {
        return new Ratings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
