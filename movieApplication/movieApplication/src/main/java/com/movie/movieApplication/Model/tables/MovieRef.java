/*
 * This file is generated by jOOQ.
 */
package com.movie.movieApplication.Model.tables;


import com.movie.movieApplication.Model.Keys;
import com.movie.movieApplication.Model.Public;
import com.movie.movieApplication.Model.tables.records.MovieRefRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MovieRef extends TableImpl<MovieRefRecord> {

    private static final long serialVersionUID = 751348852;

    /**
     * The reference instance of <code>public.movie_ref</code>
     */
    public static final MovieRef MOVIE_REF = new MovieRef();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieRefRecord> getRecordType() {
        return MovieRefRecord.class;
    }

    /**
     * The column <code>public.movie_ref.id</code>.
     */
    public final TableField<MovieRefRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('movie_ref_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.movie_ref.cr_id</code>.
     */
    public final TableField<MovieRefRecord, Integer> CR_ID = createField(DSL.name("cr_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.movie_ref.fi_id</code>.
     */
    public final TableField<MovieRefRecord, Integer> FI_ID = createField(DSL.name("fi_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.movie_ref.la_id</code>.
     */
    public final TableField<MovieRefRecord, Integer> LA_ID = createField(DSL.name("la_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.movie_ref.ra_id</code>.
     */
    public final TableField<MovieRefRecord, Integer> RA_ID = createField(DSL.name("ra_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.movie_ref</code> table reference
     */
    public MovieRef() {
        this(DSL.name("movie_ref"), null);
    }

    /**
     * Create an aliased <code>public.movie_ref</code> table reference
     */
    public MovieRef(String alias) {
        this(DSL.name(alias), MOVIE_REF);
    }

    /**
     * Create an aliased <code>public.movie_ref</code> table reference
     */
    public MovieRef(Name alias) {
        this(alias, MOVIE_REF);
    }

    private MovieRef(Name alias, Table<MovieRefRecord> aliased) {
        this(alias, aliased, null);
    }

    private MovieRef(Name alias, Table<MovieRefRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MovieRef(Table<O> child, ForeignKey<O, MovieRefRecord> key) {
        super(child, key, MOVIE_REF);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MovieRefRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MOVIE_REF;
    }

    @Override
    public List<ForeignKey<MovieRefRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MovieRefRecord, ?>>asList(Keys.MOVIE_REF__CR_ID_FK, Keys.MOVIE_REF__FI_ID_FK, Keys.MOVIE_REF__LA_ID_FK, Keys.MOVIE_REF__RA_ID_FK);
    }

    public Crew crew() {
        return new Crew(this, Keys.MOVIE_REF__CR_ID_FK);
    }

    public Films films() {
        return new Films(this, Keys.MOVIE_REF__FI_ID_FK);
    }

    public Language language() {
        return new Language(this, Keys.MOVIE_REF__LA_ID_FK);
    }

    public Ratings ratings() {
        return new Ratings(this, Keys.MOVIE_REF__RA_ID_FK);
    }

    @Override
    public MovieRef as(String alias) {
        return new MovieRef(DSL.name(alias), this);
    }

    @Override
    public MovieRef as(Name alias) {
        return new MovieRef(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieRef rename(String name) {
        return new MovieRef(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieRef rename(Name name) {
        return new MovieRef(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
