/*
 * This file is generated by jOOQ.
 */
package com.movie.movieApplication.Model.tables;


import com.movie.movieApplication.Model.Indexes;
import com.movie.movieApplication.Model.Keys;
import com.movie.movieApplication.Model.Public;
import com.movie.movieApplication.Model.tables.records.FilmsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Films extends TableImpl<FilmsRecord> {

    private static final long serialVersionUID = -1689761546;

    /**
     * The reference instance of <code>public.films</code>
     */
    public static final Films FILMS = new Films();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmsRecord> getRecordType() {
        return FilmsRecord.class;
    }

    /**
     * The column <code>public.films.film_id</code>.
     */
    public final TableField<FilmsRecord, Integer> FILM_ID = createField(DSL.name("film_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('films_film_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.films.name</code>.
     */
    public final TableField<FilmsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.films.description</code>.
     */
    public final TableField<FilmsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.films</code> table reference
     */
    public Films() {
        this(DSL.name("films"), null);
    }

    /**
     * Create an aliased <code>public.films</code> table reference
     */
    public Films(String alias) {
        this(DSL.name(alias), FILMS);
    }

    /**
     * Create an aliased <code>public.films</code> table reference
     */
    public Films(Name alias) {
        this(alias, FILMS);
    }

    private Films(Name alias, Table<FilmsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Films(Name alias, Table<FilmsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Films(Table<O> child, ForeignKey<O, FilmsRecord> key) {
        super(child, key, FILMS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FILMS_PKEY);
    }

    @Override
    public Identity<FilmsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FILMS;
    }

    @Override
    public UniqueKey<FilmsRecord> getPrimaryKey() {
        return Keys.FILMS_PKEY;
    }

    @Override
    public List<UniqueKey<FilmsRecord>> getKeys() {
        return Arrays.<UniqueKey<FilmsRecord>>asList(Keys.FILMS_PKEY);
    }

    @Override
    public Films as(String alias) {
        return new Films(DSL.name(alias), this);
    }

    @Override
    public Films as(Name alias) {
        return new Films(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Films rename(String name) {
        return new Films(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Films rename(Name name) {
        return new Films(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
